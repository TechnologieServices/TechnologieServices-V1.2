//Extension descriptor
{
	"extensionName":"UNO et Grove",			  //The name showed in the interface (menu and widget)
  "description":"Utilisation des modules Grove",
  "version":"1.2",
	"sort":0,										                  //Position in the menu
  "author":"TechnologieServices",
  "homepage":"www.technologieservices.fr ",	
	"javascriptURL":"js/technologie-services.js", //Online functions
  "extensionPort":0, 								            //Network port of extension, 0 for serial port
  "firmware":"",
	"blockSpecs": [ 								              //Blocks definition
		["h","UNO et Grove - générer le code","runArduino"],
		["-"],
		["B","Lire l'état logique %m.digitalIn sur la broche %m.digitalPort","digitalRead","<Saisie libre>","D2",
		{"setup":"pinMode({1},INPUT);\n","inc":"","def":"","work":"digitalRead({1})","loop":""}],
		["R","Lire la valeur du capteur %m.analogIn sur la broche %m.analogPort","analogRead","<Saisie libre>","A0",
		{"encode":"{s0}{d1}","setup":"pinMode({1},INPUT);\n","inc":"","def":"","work":"analogRead({1})","loop":""}],
		["-"],
		["w","Mettre %m.digitalOut sur la broche %m.digitalPort à %m.digital","digitalWrite", "<Saisie libre>", "D2", "HIGH",
		{"setup":"pinMode({1},OUTPUT);\n","inc":"","def":"","work":"digitalWrite({1},{2});\n","loop":""}],
		["w","PWM %s sur la broche %m.digitalPort à %n","analogWrite", "<Saisie libre>", "D2",  0,
		{"setup":"pinMode({1},OUTPUT);\n","inc":"","def":"","work":"analogWrite({1},{2});\n","loop":""}],
    ["-"],
		["w", "Afficher sur le nombre %n sur la broche %m.digitalPort et %m.affichage \":\"","sevSegDisplayWrite", 0, "D2", "afficher",
		{"setup":"","inc":"#include \"TSDigitalTube.h\"\n","def":"TSDigitalTube digitalTube_{1};","work":"digitalTube_{1}.show({1}, {0}, {2});","loop":""}],
    ["w", "Afficher le texte %s sur la ligne %n","i2cDisplayWrite","<Saisie libre>", 0,
		{"setup":"rgbLcd.begin(16,2);\n","inc":"#include \"rgb_lcd.h\"\n","def":"rgb_lcd rgbLcd;","work":"rgbLcd.setCursor(0,{1});\nrgbLcd.print({0});\n","loop":""}],
    ["w", "Effacer le texte","i2cDisplayClear",
		{"setup":"rgbLcd.begin(16,2);\n","inc":"#include \"rgb_lcd.h\"\n","def":"rgb_lcd rgbLcd;","work":"rgbLcd.clear();\n","loop":""}],
    ["w", "Eclairer l'écran avec la couleur rouge: %n vert: %n bleu: %n","i2cDisplayRGB", 255, 255, 255,
		{"setup":"rgbLcd.begin(16,2);\n","inc":"#include \"rgb_lcd.h\"\n","def":"rgb_lcd rgbLcd;","work":"rgbLcd.setRGB({0},{1},{2});\n","loop":""}],
    ["w", "Mettre la barre de LED au niveau %n sur la broche %m.digitalPort","ledBarWrite", 0, "D2",
		{"setup":"","inc":"#include \"TSLedBarOnline.h\"\n","def":"TSLedBar ledBar_{1};","work":"ledBar_{1}.setLevel({1}, {0});\n","loop":""}],
    ["w", "Allumer la LED %n du ruban de taille %n sur la broche %m.digitalPort à la couleur rouge: %n vert: %n bleu: %n",
    "ledStripPixel",
    0, 30, "D2", 255, 255, 255,
		{
      "setup":"ls_{2}.init({2}, {1});\n",
      "inc":"#include \"TSLedStrip.h\"\n",
      "def":"TSLedStrip ls_{2};",
      "work":"ls_{2}.mStrip->setPixelColor({0}, {3}, {4}, {5});\n",
      "loop":""
    }],
    ["w", "Régler l'intensité du ruban de taille %n sur la broche %m.digitalPort à la valeur: %n",
    "ledStripBrightness",
    30, "D2", 255,
		{
      "setup":"ls_{1}.init({1}, {0});\n",
      "inc":"#include \"TSLedStrip.h\"\n",
      "def":"TSLedStrip ls_{1};",
      "work":"ls_{1}.mStrip->setBrightness({2});\n",
      "loop":""
    }],
    ["w", "Lancer l'effet %d.led_strip_pattern sur le ruban de taille %n sur la broche %m.digitalPort rouge: %n vert: %n bleu: %n",
    "ledStripPattern",
    "Fondu", 30, "D2", 255, 255, 255,
		{
      "setup":"ls_{2}.init({2}, {1});\n",
      "inc":"#include \"TSLedStrip.h\"\n",
      "def":"TSLedStrip ls_{2};",
      "work":"ls_{2}.animation({0}, {3}, {4}, {5});\n",
      "loop":""
    }],
    ["w", "⊕Actionner la fonction %d.mp3_commande du lecteur MP3 sur la broche %m.digitalPort",
    "mp3Run",
    "Lecture", "D2",
		{
      "setup":"tsPlayer_{1}.init({1});\n",
      "inc":"#include \"TSPlayer.h\"\n",
      "def":"TSPlayer tsPlayer_{1};",
      "work":"tsPlayer_{1}.command({0});\n",
      "loop":""
    }],
		["-"],
    ["R","Lire la température sur la broche %m.analogPort en °C","temperatureRead", "A0",
    {"setup":"","inc":"#include \"TSTemperature.h\"\n","def":" ;","work":"getTemperature(analogRead({0}), 100000.0f, 4275)","loop":""}],
    ["R","Lire la température %m.dht sur la broche %m.digitalPort en °C","dhtTemperatureRead", "DHT11", "D2",
    {"setup":"","inc":"#include \"DHT.h\"\n","def":"DHT dht({1}, {0});","work":"dht.readTemperature()","loop":""}],
    ["R","Lire le taux d'humidité %m.dht sur la broche %m.digitalPort en %","dhtHumidityRead", "DHT11", "D2",
		{"setup":"","inc":"#include \"DHT.h\"\n","def":"DHT dht({1}, {0});","work":"dht.readHumidity()","loop":""}],
    ["R","Lire le taux d'humidité (GROV24) sur la broche %m.analogPort","humidityRead", "A0",
    {"setup":"","inc":"#include \"TSTemperature.h\"\n","def":" ;","work":"getHumidity({0})","loop":""}],
    ["R","⊕Lire la température (BMP280) en °C","BMP280TemperatureRead",
    {"setup":"bmp280.init();\n","inc":"#include \"Seeed_BMP280.h\"\n","def":"BMP280 bmp280;","work":"bmp280.getTemperature()","loop":""}],
    ["R","⊕Lire la pression atmosphérique (BMP280) en Pa","BMP280PressureRead",
    {"setup":"bmp280.init();\n","inc":"#include \"Seeed_BMP280.h\"\n","def":"BMP280 bmp280;","work":"bmp280.getPressure()","loop":""}],
		["-"],
    ["w", "Définir la vitesse du servo-moteur continu de la broche %m.digitalPort à %n dans le sens %m.sens (trim: %n )","servoContWrite", "D2", 0, "normal", 0,
		{"setup":"","inc":"#include <Servo.h>\n#include \"TSServoOnline.h\"\n","def":"TSServo tsservo_{0};","work":"tsservo_{0}.write({0}, {1}, {2}, {3});\n","loop":""}],
    ["w", "Définir l'angle du servo-moteur de la broche %m.digitalPort à %n ° vitesse %n","servoAngleWrite", "D2", 0, 100,
		{"setup":"","inc":"#include <Servo.h>\n#include \"TSServoOnline.h\"\n","def":"TSServo tsservo_{0};","work":"tsservo_{0}.write({0}, {1}, {2});\n","loop":""}],
    ["w", "Allumer la LED %n de la broche %m.digitalPort à la couleur rouge: %n vert: %n bleu: %n","rgbLedWrite", 0, "D2", 255, 255, 255,
		{"setup":"","inc":"#include \"TSRGBLed.h\"\n","def":"TSRGBLed rgbLed;","work":"rgbLed.setColorRGB({1}, {1}+1, {0}, {2}, {3}, {4});\n","loop":""}],
    ["R", "⊕Lire la valeur %m.colorRGB sur le capteur couleur", "readColorRGB", "Rouge", 0,
    {
      "setup"	:"colorSensor.init(1);\n",
      "inc"	:"#include <Wire.h>;\n#include \"Seeed_ColorSensor.h\"\n",
      "def"	:"Seeed_ColorSensor colorSensor;\n",
      "work"	:"colorSensor.litCouleur({0})",
      "loop"	:""
    }],
    ["R","Transformer la valeur %n de \[%n à %n \] vers \[%n à %n \]","map", 500, 0, 1023, 0, 255,
    {"setup":"","inc":"","def":"","work":"map({0},{1},{2},{3},{4})","loop":""}],
    ["R","Lire la valeur %m.joystick du joystick sur la broche %m.analogPort","joystickRead", "de l'axe X", "A0",
    {"setup":"","inc":"#include \"TSJoystick.h\"\n","def":" ;","work":"getJoystick({0}, {1})","loop":""}],
    ["R","Lire la distance par ultrasons sur la broche %m.digitalPort","ultrasonicRangerRead","D2",
    {"setup":"","inc":"#include \"Ultrasonic.h\"\n","def":"Ultrasonic us_{0}({0});","work":"us_{0}.MeasureInCentimeters()","loop":""}],
		["R","Lire le chronomètre","timerRead","0",
		{"setup":"","inc":"","def":"double currentTime = 0;\ndouble lastTime = 0;\n","work":"currentTime","loop":"currentTime = millis()/1000.0 - lastTime;\n"}],
		["w","Initialiser le chronomètre","timerWrite","0",
		{"setup":"","inc":"","def":"double lastTime = 0;\n","work":"lastTime = millis()/1000.0;\n","loop":""}],
    ["w","Définir la vitesse des moteurs G: %n D: %n en position %m.direction ",
    "i2cDriver",
    255,
    255,
    "en avant",
    {
      "setup":"i2cMotorDriver.begin();\n",
      "inc":"#include \"TSi2cMotorDriver.h\"\n",
      "def":"TSi2cMotorDriver i2cMotorDriver;\n",
      "work":"i2cMotorDriver.MotorSpeedSetAB({0},{1});\ni2cMotorDriver.MotorDirectionSet({2});\n",
      "loop":""
    }],
    ["-"],
    ["B","RF433 %m.digitalPort disponible",
    "RF433Available",
    "D2",
    {
      "setup" : "rf433_{0}.enableReceive(digitalPinToInterrupt({0}));\n",
			"inc" : "#include \"RCSwitch.h\"\n",
			"def" : "RCSwitch rf433_{0};\n",
			"work" : "rf433_{0}.available()",
			"loop" : ""
		}],
		["R","Lire la valeur du capteur RF433 sur la broche %m.digitalPort",
    "RF433Read",
    "D2",		
		{
			"setup" : "rf433_{0}.enableReceive(digitalPinToInterrupt({0}));\n",
			"inc" : "#include \"RCSwitch.h\"\n",
			"def" : "RCSwitch rf433_{0};\n",
			"work" : "rf433_{0}.getReceivedValue()",
			"loop" : "rf433_{0}.resetAvailable();\n"
		}],
    ["-"],
		["B","⊕RFID %m.digitalPort disponible",
    "RFIDavailable",
    "D2",
    {
    "setup" : "",
    "inc" : "#include \"Seeed_RFID.h\"\n",
    "def" : "Seeed_RFID RFID_{0}({0}, {0}+1);",
    "work" : "RFID_{0}.isAvailable()",
    "loop" : ""
    }],
		["R","⊕Lire la valeur du capteur RFID  sur la broche %m.digitalPort",
    "readRFID",
    "D2",		
    {
    "setup" : "",
    "inc" : "#include \"Seeed_RFID.h\"\n",
    "def" : "Seeed_RFID RFID_{0}({0}, {0}+1);",
    "work" : "RFID_{0}.cardNumber()",
    "loop" : ""
    }],
    ["-"],
    ["R","⊕Lire l'axe %m.axis de la boussole",
    "readCompass3Axis",
    "X",
    {
			"setup"	: "compass3Axis = new Adafruit_HMC5883_Unified;\n",
			"inc"	:"#include \"Adafruit_Sensor.h\"\n#include \"Adafruit_HMC5883_U.h\"\n",
			"def"	:"Adafruit_HMC5883_Unified *compass3Axis;\n",
			"work"	:"compass3Axis->readAngle({0})",
			"loop"	:""
    }],
		["R","⊕Lire l'axe %m.axis de l'accéléromètre",
    "readAccelerometer",
    "X",
    {
      "setup"	: "adxl.powerOn();\n",
      "inc"	:"#include \"ADXL345.h\"\n",
      "def"	:"ADXL345 adxl;",
      "work"	:"adxl.getValue({0})",
      "loop"	:""
    }],
    ["-"],
    ["B","BT: données disponibles sur le port %m.digitalPort","appInventorDataAvailable","D2",
		{
      "setup":"",
      "inc":"#include \"TSSerial.h\"\n",
      "def":"TSSerial bt;",
      "work":"bt.dataAvailable({0})",
      "loop":""
    }],
    ["w", "BT: envoyer %s de valeur %n sur le port %m.digitalPort","appInventorSend","<Saisie libre>", 0, "D2",
		{
      "setup":"",
      "inc":"#include \"TSSerial.h\"\n",
      "def":"TSSerial bt;",
      "work":"bt.send({2}, String({0})+\":\"+{1});",
      "loop":""
    }],
    ["R", "BT: recevoir la variable %s sur le port %m.digitalPort","appInventorReceive","<Saisie libre>", "D2",
		{
      "setup":"",
      "inc":"#include \"TSSerial.h\"\n",
      "def":"TSSerial bt;\n",
      "work":"bt.receiveVariable({0}, {1})",
      "loop":""
    }],
	],
	"menus": {
		"digital":["HIGH","LOW"],
		"digitalOut":[
			"la led rouge",
			"la led verte",
			"la led bleue",
			"la led blanche",
			"la led multicolore",
			"le relais",
			"l'émetteur IR",
			"le buzzer",
			"le vibreur",
			"l'électroaimant",
			"le bornier"
		],
		"digitalIn":[
			"de l'interrupteur",
			"du bouton poussoir",
			"de l'interrupteur ILS",
			"du tilt",
			"de la touche tactile",
			"de la présence d'eau",
			"du detecteur de présence",
			"du suiveur de ligne",
			"de l'effet HALL"
		],
		"analogIn":[
			"potentiomètre",
			"U.V.",
			"lumière",
			"accéléromètre- axe X",
			"accéléromètre- axe Y",
			"accéléromètre- axe Z",
			"electromyogramme",
			"conductivité de la peau",
			"fumée/gaz",
			"niveau sonore"
		],
    "joystick":[
			"de l'axe X",
			"de l'axe Y",
			"du bouton"
		],
    "dht":[
			"DHT11",
			"DHT22"
		],
    "led_strip_pattern":[
      "Uni",
      "Fondu",
      "Arc en ciel 1",
      "Arc en ciel 2",
      "Vogue",
      "Cylon",
      "Cascade"
    ],
    "mp3_commande":[
      "Lecture",
      "Pause",
      "Reprise",
      "Suivant",
      "Précédent",
      "Boucle",
      "Volume +",
      "Volume -",
    ],
    "sens":[
			"normal",
			"inverse"
		],
    "affichage":[
			"cacher",
			"afficher"
		],
     "direction":[
			"en avant",
			"en arrière",
			"à gauche",
			"à droite",
		],
    "colorRGB":["Rouge", "Bleu", "Vert"],
		"axis":["X", "Y", "Z"],
		"digitalPort":["D2","D3","D4","D5","D6","D7","D8","D0"],
		"analogPort":["A0","A1","A2","A3"],
		"notes":["Do2","Re2","E2","Fa2","Sol2","La2","Si2","Do3","Re3","E3","Fa3","Sol3","La3","Si3","Do4","Re4","E4","Fa4","Sol4","La4","Si4","Do5","Re5","E5","Fa5","Sol5","La5","Si5","Do6","Re6","E6","Fa6","Sol6","La6","Si6","Do7","Re7","E7","Fa7","Sol7","La7","Si7","Do8","Re8"],
	},
	"values":{
		"HIGH":1, "LOW":0,
		"de l'axe X":0, "de l'axe Y":1, "du bouton": 2,
    "DHT11":11, "DHT22":22,
		"normal":0, "inverse":1,
		"cacher":0, "afficher":1,
    "Uni":0, "Fondu":1, "Arc en ciel 1":2, "Arc en ciel 2":3, "Vogue":4, "Cylon":5, "Cascade":6,
    "Lecture":1, "Pause":2, "Reprise":3, "Suivant":4, "Précédent":5, "Boucle":6, "Volume +":7, "Volume -":8,
		"D2":2, "D3":3,	"D4":4,	"D5":5,	"D6":6, "D7":7,	"D8":8,	"A0":0,	"A1":1,	"A2":2,	"A3":3,"D0":0,
		"Si0":31,"Do1":33,"Re1":37,"E1":41,"Fa1":44,"Sol1":49,"La1":55,"Si1":62,
		"Do2":65,"Re2":73,"E2":82,"Fa2":87,"Sol2":98,"La2":110,"Si2":123,
		"Do3":131,"Re3":147,"E3":165,"Fa3":175,"Sol3":196,"La3":220,"Si3":247,
		"Do4":262,"Re4":294,"E4":330,"Fa4":349,"Sol4":392,"La4":440,"Si4":494,
		"Do5":523,"Re5":587,"E5":659,"Fa5":698,"Sol5":784,"La5":880,"Si5":988,
		"Do6":1047,"Re6":1175,"E6":1319,"Fa6":1397,"Sol6":1568,"La6":1760,"Si6":1976,
		"Do7":2093,"Re7":2349,"E7":2637,"Fa7":2794,"Sol7":3136,"La7":3520,"Si7":3951,
		"Do8":4186,"Re8":4699,
		"Half":500,"Quater":250,"Eighth":125,"Whole":1000,"Double":2000,"Zero":0,
		"en avant":6,"en arrière":9,"à gauche":5,"à droite":10,
	},
	"translators":{}
}